<svg viewBox="0 0 <%- canvas_size + padding.x * 2.0 %> <%- canvas_size + padding.y * 2.0 %>" xmlns="http://www.w3.org/2000/svg" style="width: 75px;">
	<style>
    .axis {
      stroke-linecap: round;
      stroke-width: <%- axis_thickness %>;
    }

    .axis, .light-channel-background {
      stroke: #c5d1e0;
      filter: url(#inset-shadow);
    }

    .slider {
      fill: #7facff;
    }

    .handle {
      filter: drop-shadow(3px 3px 2px rgba(0, 0, 0, .7));
    }

    .light {
      filter: url(#glow);
    }

    .light-channel-clip {
      stroke: white;
    }
	</style>

  <filter id="inset-shadow" filterUnits="userSpaceOnUse">
    <!-- Shadow offset -->
    <feOffset
      dx='0'
      dy='0'
    />
    <!-- Shadow blur -->
    <feGaussianBlur
      stdDeviation='1'
      result='offset-blur'
    />
    <!-- Invert drop shadow to make an inset shadow-->
    <feComposite
      operator='out'
      in='SourceGraphic'
      in2='offset-blur'
      result='inverse'
    />
    <!-- Cut colour inside shadow -->
    <feFlood
      flood-color='black'
      flood-opacity='.95'
      result='color'
    />
    <feComposite
      operator='in'
      in='color'
      in2='inverse'
      result='shadow'
    />
    <!-- Placing shadow over element -->
    <feComposite
      operator='over'
      in='shadow'
      in2='SourceGraphic'
    />
  </filter>

  <filter id="glow" filterUnits="userSpaceOnUse">
    <!-- Shadow offset -->
    <feOffset
      dx='0'
      dy='0'
    />
    <!-- Shadow blur -->
    <feGaussianBlur
      stdDeviation='1'
      result='offset-blur'
    />
    <!-- Invert drop shadow to make an inset shadow-->
    <feComposite
      operator='out'
      in='offset-blur'
      in2='SourceGraphic'
      result='inverse'
    />
    <!-- Cut colour inside shadow -->
    <feFlood
      flood-color='#484767'
      flood-opacity='.95'
      result='color'
    />
    <feComposite
      operator='in'
      in='color'
      in2='inverse'
      result='shadow'
    />
    <!-- Placing shadow over element -->
    <feComposite
      operator='over'
      in='shadow'
      in2='SourceGraphic'
    />
  </filter>

  <defs>
    <% let angle = 45.0f64.to_radians(); let thickness = 2.0; %>
    <% let outer = p((light.radius*2.0) / 2.0f64.sqrt(), (light.radius*2.0) / 2.0f64.sqrt()); %>
    <% let inner = p((light.radius*2.0) / 2.0f64.sqrt(), (light.radius*2.0) / 2.0f64.sqrt()); %>
    <path id="light-channel" stroke-width="2" stroke-linecap="round" d="M <%- hcanvas_size - (hcanvas_size - light.padding) * light.channel_multiplier.sqrt() / 2.0 + 1.0f64 %> <%- light.padding + 1.0f64 %> a <%- hcanvas_size - light.padding %> <%- hcanvas_size - light.padding %> 0 0 0 -<%- (hcanvas_size - light.padding) * light.channel_multiplier %> <%- (hcanvas_size - light.padding) * light.channel_multiplier %>" />
    <% if false { %>
    <path id="light-channel" fill="black" d="M <%- hcanvas_size - outer.x %> <%- hcanvas_size - outer.y %> l <%- angle.sin() * 2.0 %> <%- angle.cos() * 2.0 %> l <%- angle.cos() * 6.0 %> -<%- angle.sin() * 6.0 %> Z" />
    <% } %>
    <% if false { %>
    <path id="light-channel" fill="black" d="
      M <%- outer.x %> <%- outer.y - light.radius %>
      a <%- light.radius %> <%- light.radius %>
      0 0 0
      -<%- light.radius %> <%- light.radius %>
      l 0 <%- thickness %>
      a <%- light.radius - thickness %> <%- light.radius - thickness %>
      0 0 0
      -<%- light.radius - thickness %> <%- light.radius - thickness %>
      l 0 -<%- thickness %>" />
    <path fill="white" d="
      M <%- inner.x %> <%- inner.y - (light.radius - thickness) %>
      a <%- light.radius - thickness %> <%- light.radius - thickness %>
      0 0 0
      -<%- light.radius - thickness %> <%- light.radius - thickness %>" />
    <% } %>
  </defs>

  <g transform="translate(<%- padding.x %> <%- padding.y %>)">
    <circle cx="25" cy="25" r="25" fill="#f4f9ff" />

    <!-- Axes -->
    <path d="M<%- axis_start %> <%- hcanvas_size %> H<%- axis_end %> M<%- hcanvas_size %> <%- axis_start %> V<%- axis_end %>" class="axis" />

    <!-- X-axis Slider (Red) -->
    <rect y="<%- slider_mid_start %>" width="<%- slider_length %>" height="<%- slider_thickness %>" rx="<%- hslider_thickness %>" class="slider">
      <animate attributeName="x" values="<%- slider_pos_start %>;<%- slider_pos_end %>;<%- slider_pos_start %>" keyTimes="0;0.5;1" dur="<%- duration %>s" begin="-<%- qduration %>s" calcMode="spline" keySplines="<%- key_splines %>" repeatCount="indefinite"/>
    </rect>

    <!-- Y-axis Slider (Blue) -->
    <rect x="<%- slider_mid_start %>" width="<%- slider_thickness %>" height="<%- slider_length %>" rx="<%- hslider_thickness %>" class="slider">
      <animate attributeName="y" values="<%- slider_pos_start %>;<%- slider_pos_end %>;<%- slider_pos_start %>" keyTimes="0;0.5;1" dur="<%- duration %>s" begin="0s" calcMode="spline" keySplines="<%- key_splines %>" repeatCount="indefinite"/>
    </rect>

    <% if false { %>
    <line stroke="#45196a" stroke-width="<%- handle_thickness %>" stroke-linecap="round" class="handle">
      <animate attributeName="y1" values="<%- vertical_end.x[0] %>;<%- vertical_end.x[1] %>;<%- vertical_end.x[0] %>" keyTimes="0;0.5;1" dur="<%- duration %>s" begin="0s" calcMode="spline" keySplines="<%- key_splines %>" repeatCount="indefinite"/>
      <animate attributeName="x1" values="<%- vertical_end.y[0] %>;<%- vertical_end.y[1] %>;<%- vertical_end.y[0] %>" keyTimes="0;0.5;1" dur="<%- duration %>s" begin="-<%- qduration %>s" calcMode="spline" keySplines="<%- key_splines %>" repeatCount="indefinite"/>

      <animate attributeName="y2" values="<%- horizontal_end.y[0] %>;<%- horizontal_end.y[1] %>;<%- horizontal_end.y[0] %>" keyTimes="0;0.5;1" dur="<%- duration %>s" begin="0s" calcMode="spline" keySplines="<%- key_splines %>" repeatCount="indefinite"/>
      <animate attributeName="x2" values="<%- horizontal_end.x[0] %>;<%- horizontal_end.x[1] %>;<%- horizontal_end.x[0] %>" keyTimes="0;0.5;1" dur="<%- duration %>s" begin="-<%- qduration %>s" calcMode="spline" keySplines="<%- key_splines %>" repeatCount="indefinite"/>
    </line>
    <% } %>

    <% if false { %>
    <circle cy="<%- hcanvas_size %>" r="1" fill="blue">
      <animate attributeName="cx" values="8;42;8" keyTimes="0;0.5;1" dur="1.6s" begin="0s" calcMode="spline" keySplines="<%- key_splines %>" repeatCount="indefinite"/>
    </circle>

    <circle cx="<%- hcanvas_size %>" r="1" fill="red">
      <animate attributeName="cy" values="8;42;8" keyTimes="0;0.5;1" dur="1.6s" begin="-0.4s" calcMode="spline" keySplines="<%- key_splines %>" repeatCount="indefinite"/>
    </circle>

    <circle r="1" fill="white">
      <animate attributeName="cx" values="16.5;33.5;16.5" keyTimes="0;0.5;1" dur="1.6s" begin="0s" calcMode="spline" keySplines="<%- key_splines %>" repeatCount="indefinite"/>
      <animate attributeName="cy" values="16.5;33.5;16.5" keyTimes="0;0.5;1" dur="1.6s" begin="-0.4s" calcMode="spline" keySplines="<%- key_splines %>" repeatCount="indefinite"/>
    </circle>

    <circle cx="<%- hcanvas_size %>" cy="<%- hcanvas_size %>" r="8.5" stroke="green" stroke-width="0.25" fill="none" />
    <% } %>

    <% if false { %>
    <circle r="2" fill="white">
      <animate attributeName="cy" values="<%- horizontal_end.y[0] %>;<%- horizontal_end.y[1] %>;<%- horizontal_end.y[0] %>" keyTimes="0;0.5;1" dur="<%- duration %>s" begin="0s" calcMode="spline" keySplines="<%- key_splines %>" repeatCount="indefinite"/>
      <animate attributeName="cx" values="<%- horizontal_end.x[0] %>;<%- horizontal_end.x[1] %>;<%- horizontal_end.x[0] %>" keyTimes="0;0.5;1" dur="<%- duration %>s" begin="-<%- qduration %>s" calcMode="spline" keySplines="<%- key_splines %>" repeatCount="indefinite"/>
    </circle>
    <% } %>

    <linearGradient x1="8.042%" y1="0%" x2="65.682%" y2="23.865%" id="light-gradient">
      <stop stop-color="#eee" stop-opacity="0" offset="0%" />
      <stop stop-color="#eee" stop-opacity=".631" offset="63.146%" />
      <stop stop-color="#eee" offset="100%" />
    </linearGradient>

    <mask id="light-clip" x="0" y="0" width="100%" maskUnits="userSpaceOnUse">
      <% if false { %>
      <circle cx="<%- hcanvas_size %>" cy="<%- hcanvas_size %>" r="18" stroke="black" stroke-linecap="round" stroke-width="2" stroke-dasharray="<%- light.dasharray[0] %>,<%- light.dasharray[1] %>" stroke-dashoffset="<%- light.dashoffset %>" />
      <% } %>
      <% if false { %>
      <rect x="0" y="0" width="<%- canvas_size %>" height="<%- canvas_size %>" fill="red" />
      <% } %>
      <%+ LightChannel { class: "light-channel-clip" } %>
    </mask>

    <% if false { %>
    <rect x="0" y="0" width="<%- canvas_size %>" height="<%- canvas_size %>" fill="white" mask="url(#light-clip)" />
    <% } %>

    <g fill="none" fill-rule="evenodd">
      <% if false { %>
      <path stroke="yellow" stroke-width="2" d="M <%- hcanvas_size %> <%- light.padding %> a <%- hcanvas_size - light.padding %> <%- hcanvas_size - light.padding %> 0 0 0 -<%- hcanvas_size - light.padding %> <%- hcanvas_size - light.padding %>" />
      <!-- translate(<%- hcanvas_size %>, <%- hcanvas_size %>) -->
      <% } %>
      <%+ LightChannel { class: "light-channel-background" } %>
      <g class="light">
        <g mask="url(#light-clip)">
          <% if false { %>
          <circle cx="<%- hcanvas_size %>" cy="<%- hcanvas_size %>" r="18" stroke="black" stroke-linecap="round" stroke-width="2" stroke-dasharray="<%- light.dasharray[0] %>,<%- light.dasharray[1] %>" stroke-dashoffset="<%- light.dashoffset %>" />
          <% } %>
          <g transform="translate(<%- light.padding %> <%- light.padding %>)">
            <path stroke="url(#light-gradient)" stroke-width="2" d="M <%- light.diameter %> <%- light.radius %> a <%- light.radius %> <%- light.radius %> 0 0 0 -<%- light.radius %> -<%- light.radius %>" >
              <animateTransform
                attributeName="transform"
                type="rotate"
                from="0 <%- light.radius %> <%- light.radius %>"
                to="360 <%- light.radius %> <%- light.radius %>"
                dur="0.8s"
                repeatCount="indefinite"
              />
            </path>
            <circle fill="#fff" cx="<%- light.diameter %>" cy="<%- light.radius %>" r="1">
              <animateTransform
                attributeName="transform"
                type="rotate"
                from="0 <%- light.radius %> <%- light.radius %>"
                to="360 <%- light.radius %> <%- light.radius %>"
                dur="0.8s"
                repeatCount="indefinite"
              />
            </circle>
            <% if false { %>
            <path d="M<%- light.diameter %> <%- light.radius %> c0 -13.253 -10.746 -<%- light.radius %> -<%- light.radius %> -<%- light.radius %>" stroke="black" stroke-width="2" />
            <% } %>
          </g>
        </g>
      </g>
    </g>
  </g>
</svg>